---
title: "Homework #10: Density Estimation" 
author: "Richard 'Ricky' Kuehn"
format: ds6030hw-html
---

```{r config, include=FALSE}
# Set global configurations and settings here
knitr::opts_chunk$set()                 # set global chunk options
ggplot2::theme_set(ggplot2::theme_bw()) # set ggplot2 theme
```

# Required R packages and Directories {.unnumbered .unlisted}

```{r packages, message=FALSE, warning=FALSE}
data_dir = 'https://mdporter.github.io/teaching/data' # data directory
library(ks)        # functions for KDE
library(tidyverse) # functions for data manipulation   
```

# Problem 1 Geographic Profiling

Geographic profiling, a method developed in criminology, can be used to estimate the [home location (roost) of animals](https://www.sciencedirect.com/science/article/pii/S0022519305004157) based on a collection of sightings. The approach requires an estimate of the distribution the animal will travel from their roost to forage for food.

A sample of $283$ distances that pipistrelle bats traveled (in meters) from their roost can be found at:

-   **Bat Data**: \<`r file.path(data_dir, 'geo_profile.csv')`\>

One probability model for the distance these bats will travel is: $$f(x; \theta) = \frac{x}{\theta} \exp \left( - \frac{x^2}{2 \theta} \right)$$ where the parameter $\theta > 0$ controls how far they are willing to travel.

## a. Derive a closed-form expression for the MLE for $\theta$ (i.e., show the math).

::: {.callout-note title="Solution"}
$f(x;\theta) = \frac{x}{\theta}\exp\left(-\frac{x^2}{2\theta}\right)$

$L(\theta) = \prod_{i=1}^n \frac{x_i}{\theta}\exp\left(-\frac{x_i^2}{2\theta}\right)$
:::

::: {.callout-note title="Solution"}
$\log L(\theta) = \sum_{i=1}^n \left[\log\left(\frac{x_i}{\theta}\right) - \frac{x_i^2}{2\theta}\right]$

$= \sum_{i=1}^n \log(x_i) - n\log(\theta) - \frac{1}{2\theta}\sum_{i=1}^n x_i^2$
:::

::: {.callout-note title="Solution"}
$\frac{d}{d\theta}[\log L(\theta)] = -\frac{n}{\theta} + \frac{1}{2\theta^2}\sum_{i=1}^n x_i^2 = 0$

$\frac{1}{2\theta^2}\sum_{i=1}^n x_i^2 = \frac{n}{\theta}$
:::

::: {.callout-note title="Solution"}
$\sum_{i=1}^n x_i^2 = 2n\theta$

$\hat{\theta} = \frac{1}{2n}\sum_{i=1}^n x_i^2$
:::

## b. Estimate $\theta$ for the bat data using MLE?

Calculate using the solution to part a, or use computational methods.

::: {.callout-note title="Solution"}
```{r}
bats <- read_csv("https://mdporter.github.io/teaching/data/geo_profile.csv", col_names = FALSE)
summary(bats)
```

```{r}
x <- bats$X1
n <- length(x)
```

```{r}
theta_mle <- sum(x^2)/(2*n)
theta_mle
```
This estimate makes sense considering what we know from the summary statistics.
:::

## c. Plot the estimated density

Using the MLE value of $\theta$ from part b, calculate the estimated density at a set of evaluation points between 0 and 8 meters. Plot the estimated density.

-   The x-axis should be distance and y-axis should be density (pdf).

::: {.callout-note title="Solution"}
```{r}
x_eval <- seq(0, 8, length.out = 1000)
y_est <- (x_eval/theta_mle) * exp(-x_eval^2/(2*theta_mle))
```
```{r}
# parametric plot
ggplot() +
  geom_area(aes(x=x_eval, y=y_est), fill="lightblue", alpha=0.5) +
  geom_line(aes(x=x_eval, y=y_est)) +
  geom_rug(aes(x=x), color='red', alpha=0.5) +
  labs(x="distance flown", 
       y="density")
```

:::


## d. Estimate the density using KDE.

Report the bandwidth you selected and produce a plot of the estimated density.

::: {.callout-note title="Solution"}
```{r}
bw <- kde(x)
bw$h
```
```{r}
# kde plot
plot(bw, xlab = 'distance flown')
```

:::

## e. Which model do you prefer, the parametric or KDE? Why?

::: {.callout-note title="Solution"}
```{r}
# sample data's density
ggplot() +
  geom_histogram(aes(x=x, y=after_stat(density)), 
                 fill="lightblue", alpha=0.5, bins=25) +
  geom_rug(aes(x=x), color='red', alpha=0.5) +
  labs(x="distance flown", y="density") +
  theme_minimal()
```

I prefer the KDE approach as it is better at capturing potential features in the data that aren't well-represented by the parametric model's more restrictive functional form. It was also easier to implement, and provides the same output (density estimate, eval points) and more. Although I didn't fiddle with the bandwidth, that option is also present with KDE. 
:::

# Problem 2: Interstate Crash Density

Interstate 64 (I-64) is a major east-west road that passes just south of Charlottesville. Where and when are the most dangerous places/times to be on I-64? The crash data (link below) gives the mile marker and fractional time-of-week for crashes that occurred on I-64 between mile marker 87 and 136 in 2016. The time-of-week data takes a numeric value of *\<dow\>.\<hour/24\>*, where the dow starts at 0 for Sunday (6 for Sat) and the decimal gives the time of day information. Thus `time=0.0417` corresponds to Sun at 1am and `time=6.5` corresponds to Sat at noon.

-   **Crash Data**: \<`r file.path(data_dir, 'crashes16.csv')`\>

## a. Crash Data

Extract the crashes and make a scatter plot with mile marker on x-axis and time on y-axis.

::: {.callout-note title="Solution"}
```{r}
crash <- read_csv("https://mdporter.github.io/teaching/data/crashes16.csv")
head(crash)
```
```{r}
ggplot(crash, aes(x=mile, y=time)) +
  geom_point() +
  labs(x="mile marker", y="time of week")
```

:::

## b. Use KDE to estimate the *mile marker* density.

-   Report the bandwidth.
-   Plot the density estimate.

::: {.callout-note title="Solution"}
```{r}
bw_mile <- kde(crash$mile)
bw_mile$h
```

```{r}
# kde plot
plot(bw_mile, xlab = 'mile marker')
```
:::

## c. Use KDE to estimate the temporal *time-of-week* density.

-   Report the bandwidth.
-   Plot the density estimate.

::: {.callout-note title="Solution"}
```{r}
bw_time <- kde(crash$time)
bw_time$h
```

```{r}
# kde plot
plot(bw_time, xlab = 'time of week')
```
:::

## d. Use KDE to estimate the bivariate mile-time density.

-   Report the bandwidth parameters.
-   Plot the bivariate density estimate.

::: {.callout-note title="Solution"}
```{r}
mat <- Hpi.diag(crash)
mat
```
This has drastically increased the bandwidth for mile marker but reduced for time of week.

```{r}
bw_comb <- kde(crash, H=mat)
```


```{r}
plot(bw_comb,
     cont = c(10, 50, 95),
     las=1, 
     xlab="mile marker", 
     ylab="time of week") 
points(crash, pch=19, cex=0.5, col='grey60')
grid()
```

:::

## e. Crash Hotspot

Based on the estimated density, approximate the most dangerous place and time to drive on this stretch of road. Identify the mile marker and time-of-week pair (within a few miles and hours).

::: {.callout-note title="Solution"}
There's two hotspots: one around mile marker 99-104 at 5.5-5.75 (friday afternoon) and the other at mile marker 115-120 at 1.5-1.75 (monday afternoon). This actually makes sense, as drivers are sluggish after work on Mondays and eager to get home after work on Fridays.
:::
